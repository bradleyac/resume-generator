@using BlazorBootstrap
@using RGS.Frontend.Components

<div class="@CardClass card me-3 mb-3">
  <div class="card-body">
    <div class="d-flex w-100">
      <span class="@BadgeClass ms-auto badge">@PostingSummary.Status</span>
    </div>
    <h2 class="card-title">@PostingSummary.Title</h2>
    <h3 class="card-subtitle mb-2 text-muted">@PostingSummary.Company</h3>
    <p class="card-text"><a href="@PostingSummary.Link" target="_blank">@PostingSummary.Link</a></p>
    <p class="card-text"><small class="text-muted">Imported at: @PostingSummary.ImportedAt.ToString("g")</small></p>
    <button class="btn btn-primary" @onclick="() => NavigateToPosting(PostingSummary.id)">View Details</button>
    @if (PostingSummary.Status == PostingStatus.Pending)
    {
      <button class="btn btn-secondary ms-2" @onclick="async () => await OnApplied.InvokeAsync(PostingSummary.id)">Mark Applied</button>
    }
    @if (PostingSummary.Status != PostingStatus.Archived)
    {
      <button class="btn btn-danger ms-2" @onclick="async () => await OnArchived.InvokeAsync(PostingSummary.id)">Archive Posting</button>
    }
  </div>
</div>

@code {
  [Parameter] public PostingSummary PostingSummary { get; set; } = null!;

  [Inject] private NavigationManager NavigationManager { get; set; } = null!;
  [Parameter] public EventCallback<string> OnApplied { get; set; }
  [Parameter] public EventCallback<string> OnArchived { get; set; }

  private string CardClass => PostingSummary.Status switch
  {
    "Pending" => "border-2 border-warning",
    "Applied" => "border-2 border-success",
    "Archived" => "border-2 border-secondary",
    _ => string.Empty,
  };

  private string BadgeClass => PostingSummary.Status switch
  {
    "Pending" => "bg-warning",
    "Applied" => "bg-success",
    "Archived" => "bg-secondary",
    _ => "",
  };

  private void NavigateToPosting(string postingId)
  {
    NavigationManager.NavigateTo($"/posting/{postingId}");
  }
}